class Solution {
public:
// TEMPLATE TAKEN FROM https://www.geeksforgeeks.org/kmp-algorithm-for-pattern-searching/
void computeLPSArray(vector<int>& pat, int M, vector<int>& lps)
{
    // Length of the previous longest prefix suffix
    int len = 0;

    // lps[0] is always 0
    lps[0] = 0;

    // loop calculates lps[i] for i = 1 to M-1
    int i = 1;
    while (i < M) {
        if (pat[i] == pat[len]) {
            len++;
            lps[i] = len;
            i++;
        }
        else // (pat[i] != pat[len])
        {
            if (len != 0) {
                len = lps[len - 1];
            }
            else // if (len == 0)
            {
                lps[i] = 0;
                i++;
            }
        }
    }
}

// Prints occurrences of pat in txt
vector<int> KMPSearch(vector<int>& pat, vector<int>& txt,vector<int> &result)
{
    int M = pat.size();
    int N = txt.size();

    // Create lps[] that will hold the longest prefix suffix
    // values for pattern
    vector<int> lps(M);


    // Preprocess the pattern (calculate lps[] array)
    computeLPSArray(pat, M, lps);

    int i = 0; // index for txt
    int j = 0; // index for pat
    while ((N - i) >= (M - j)) {
        if (pat[j] == txt[i]) {
            j++;
            i++;
        }

        if (j == M) {
            result.push_back(i - j + 1);
            j = lps[j - 1];
        }

        // Mismatch after j matches
        else if (i < N && pat[j] != txt[i]) {

            // Do not match lps[0..lps[j-1]] characters,
            // they will match anyway
            if (j != 0)
                j = lps[j - 1];
            else
                i = i + 1;
        }
    }
    return result;
}
    int countMatchingSubarrays(vector<int>& nums, vector<int>& pattern) {
        int n = nums.size();
        vector<int>p;

        for(int i=1;i<nums.size();i++){
            if(nums[i]>nums[i-1]) p.push_back(1);
            else if(nums[i-1]==nums[i]) p.push_back(0);
            else if(nums[i]<nums[i-1]) p.push_back(-1);
        }
        vector<int>result;
        KMPSearch(pattern,p,result);
        return result.size();





        
    }
};
